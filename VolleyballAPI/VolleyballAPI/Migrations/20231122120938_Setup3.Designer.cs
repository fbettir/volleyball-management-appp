// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VolleyballManagementAppBackend;

#nullable disable

namespace VolleyballAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231122120938_Setup3")]
    partial class Setup3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VolleyballAPI.Entities.TournamentCompetitor", b =>
                {
                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TournamentId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TournamentCompetitor");
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TrainingParticipant", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingParticipant");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.Property<string>("Posts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketPass")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("156f18e4-e93a-4e89-8208-0a2b7a3954f9"),
                            Birthday = new DateTime(2023, 11, 22, 13, 9, 37, 905, DateTimeKind.Local).AddTicks(5566),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("ae413c76-f8f8-4705-9f3a-c37df8673794")
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("06949113-90fc-4e8c-b807-4db9f1364fa6"),
                            Description = "Description Team 1",
                            Name = "Team 1",
                            Picture = "pic1"
                        },
                        new
                        {
                            Id = new Guid("2eb13b08-a59a-4f5d-9be8-8a11f8bb8ff3"),
                            Description = "Description Team 2",
                            Name = "Team 2",
                            Picture = "pic2"
                        },
                        new
                        {
                            Id = new Guid("d4de02d6-7213-46ee-a6f8-a2886cef8d27"),
                            Description = "Description Team 3",
                            Name = "Team 3",
                            Picture = "pic3"
                        },
                        new
                        {
                            Id = new Guid("ce2ffad2-7f79-490f-af3e-5c5fc409df04"),
                            Description = "Description Team 4",
                            Name = "Team 4",
                            Picture = "pic4"
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.TeamPlayer", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TeamPlayer");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("32104bf3-ec4c-4100-8130-d760c28c3912"),
                            Date = new DateTime(2023, 11, 22, 13, 9, 37, 905, DateTimeKind.Local).AddTicks(5423),
                            Description = "Description Team 1",
                            Location = "Location tournament 1",
                            Name = "Tournament 1",
                            Picture = "pic4"
                        },
                        new
                        {
                            Id = new Guid("d4e2e40d-16d0-4730-9e62-166946833429"),
                            Date = new DateTime(2023, 11, 22, 13, 9, 37, 905, DateTimeKind.Local).AddTicks(5467),
                            Description = "Description Tournament 2",
                            Location = "Location tournament 2",
                            Name = "Tournament 2",
                            Picture = "pic2"
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae413c76-f8f8-4705-9f3a-c37df8673794"),
                            Email = "user1@user.com",
                            Name = "Name 1",
                            Password = "pass1",
                            Roles = "Coach,BasicUser"
                        },
                        new
                        {
                            Id = new Guid("33454b33-0597-4121-bd6c-fbae5dc7dcb7"),
                            Email = "user2@user.com",
                            Name = "Name 2",
                            Password = "pass2",
                            Roles = "Administrator,BasicUser"
                        },
                        new
                        {
                            Id = new Guid("c044fbb9-73d0-49ce-89b0-c1450ad8b33a"),
                            Email = "user3@user.com",
                            Name = "Name 3",
                            Password = "pass3",
                            Roles = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("1e028f6d-108a-4aa3-a92e-3b6c8afa697c"),
                            Email = "user4@user.com",
                            Name = "Name 4",
                            Password = "pass4",
                            Roles = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("e9e4bbfe-69bd-4a9d-8eb6-b1e978b2f2d0"),
                            Email = "user5@user.com",
                            Name = "Name 5",
                            Password = "pass5",
                            Roles = "Coach"
                        });
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TournamentCompetitor", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.Tournament", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TrainingParticipant", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Training", "Training")
                        .WithMany("Players")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.TeamPlayer", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.PlayerDetails", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Tournament", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", null)
                        .WithMany("Tournaments")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", null)
                        .WithMany("Trainings")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.User", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", null)
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Team", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Players");

                    b.Navigation("Tournaments");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Tournament", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
