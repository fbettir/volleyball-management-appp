// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VolleyballManagementAppBackend;

#nullable disable

namespace VolleyballAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231205102020_initData")]
    partial class initData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VolleyballAPI.Entities.TournamentCompetitor", b =>
                {
                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TournamentId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TournamentCompetitors");
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TrainingParticipant", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingParticipants");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.Property<string>("Posts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketPass")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dff0053b-82af-4a9f-9677-31f211793556"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7585),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("7f7fbd19-79c1-41cc-8217-36307aa439f9")
                        },
                        new
                        {
                            Id = new Guid("bc754730-52bb-4687-9a82-42ad875ff8e6"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7594),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("6a305261-0d89-44a4-a306-086862a3da0f")
                        },
                        new
                        {
                            Id = new Guid("13b117cb-d899-4f9c-88d2-c7b496a996fa"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7597),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("eeb0d723-4361-4577-87fc-c00561f6f0f8")
                        },
                        new
                        {
                            Id = new Guid("df08cbff-86a3-4fce-b3f7-0c794ad9ad32"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7599),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("8e2f88d7-1aa6-4cea-88d1-1adeeb83f1e5")
                        },
                        new
                        {
                            Id = new Guid("3b948752-a418-4b3c-aefc-70204ea141ef"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7602),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("0d630cb0-6725-4b79-b451-c9f25b2392d1")
                        },
                        new
                        {
                            Id = new Guid("14352a50-0f76-4365-a11c-ef28cc99f265"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7605),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("04e8cb77-d7b5-49ca-9465-7d29fed071c4")
                        },
                        new
                        {
                            Id = new Guid("1a20e7b2-1e03-40d2-b078-838e8b6e09c4"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7608),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("8ee4fdb8-6765-4994-9580-77c65c34380b")
                        },
                        new
                        {
                            Id = new Guid("1ca9e487-ae63-40ca-b933-818a7488f9fc"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7611),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("6e4aa48f-5fce-4c78-b418-1dc1afd0bbd3")
                        },
                        new
                        {
                            Id = new Guid("99ed4212-2526-46f8-8a70-11d5c30d7c43"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7614),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("4c2b8d87-058f-479e-b39f-06ab2408a2eb")
                        },
                        new
                        {
                            Id = new Guid("1dad849b-347d-498d-af1e-3600be123747"),
                            Birthday = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7617),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("024008fe-419d-4ae8-a74a-c96d330825ef")
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fa58dda-a85c-4033-906f-e8102a8350ad"),
                            Description = "Description Team 1",
                            Name = "Team 1",
                            Picture = "https://spot.sch.bme.hu/photos/2023/20230923_muegyetemi_roplabda/2048/20230923_095029_opeter.jpg"
                        },
                        new
                        {
                            Id = new Guid("3b83dd1c-9539-4387-93d2-b6a0632f97ef"),
                            Description = "Description Team 2",
                            Name = "Team 2",
                            Picture = "https://spot.sch.bme.hu/photos/2023/20230923_muegyetemi_roplabda/2048/20230923_100756_opeter.jpg"
                        },
                        new
                        {
                            Id = new Guid("65d07961-c4c4-43d4-a815-e47bb8ecc17a"),
                            Description = "Description Team 3",
                            Name = "Team 3",
                            Picture = "https://spot.sch.bme.hu/photos/2023/20230923_muegyetemi_roplabda/2048/20230923_114305_adam.jpg"
                        },
                        new
                        {
                            Id = new Guid("4368df9f-73e3-444f-b36c-1ae864f346b0"),
                            Description = "Description Team 4",
                            Name = "Team 4",
                            Picture = "https://spot.sch.bme.hu/photos/2023/20230923_muegyetemi_roplabda/2048/20230923_100756_opeter.jpg"
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.TeamCoach", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamCoach");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.TeamPlayer", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TeamPlayers");

                    b.HasData(
                        new
                        {
                            TeamId = new Guid("2fa58dda-a85c-4033-906f-e8102a8350ad"),
                            PlayerId = new Guid("dff0053b-82af-4a9f-9677-31f211793556")
                        },
                        new
                        {
                            TeamId = new Guid("2fa58dda-a85c-4033-906f-e8102a8350ad"),
                            PlayerId = new Guid("bc754730-52bb-4687-9a82-42ad875ff8e6")
                        },
                        new
                        {
                            TeamId = new Guid("2fa58dda-a85c-4033-906f-e8102a8350ad"),
                            PlayerId = new Guid("13b117cb-d899-4f9c-88d2-c7b496a996fa")
                        },
                        new
                        {
                            TeamId = new Guid("2fa58dda-a85c-4033-906f-e8102a8350ad"),
                            PlayerId = new Guid("df08cbff-86a3-4fce-b3f7-0c794ad9ad32")
                        },
                        new
                        {
                            TeamId = new Guid("2fa58dda-a85c-4033-906f-e8102a8350ad"),
                            PlayerId = new Guid("3b948752-a418-4b3c-aefc-70204ea141ef")
                        },
                        new
                        {
                            TeamId = new Guid("3b83dd1c-9539-4387-93d2-b6a0632f97ef"),
                            PlayerId = new Guid("14352a50-0f76-4365-a11c-ef28cc99f265")
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("194a7716-a54f-45c5-a757-671750ea2e23"),
                            Date = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7497),
                            Description = "Description Team 1",
                            Location = "Location tournament 1",
                            Name = "Tournament 1",
                            Picture = "https://spot.sch.bme.hu/photos/2023/20230923_muegyetemi_roplabda/2048/20230923_100756_opeter.jpg"
                        },
                        new
                        {
                            Id = new Guid("1db4a9f3-3372-491e-9b9d-4cd4375d564e"),
                            Date = new DateTime(2023, 12, 5, 11, 20, 20, 306, DateTimeKind.Local).AddTicks(7539),
                            Description = "Description Tournament 2",
                            Location = "Location tournament 2",
                            Name = "Tournament 2",
                            Picture = "https://spot.sch.bme.hu/photos/2023/20230923_muegyetemi_roplabda/2048/20230923_100756_opeter.jpg"
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f7fbd19-79c1-41cc-8217-36307aa439f9"),
                            Email = "user1@user.com",
                            Name = "Name 1",
                            Password = "pass1",
                            Roles = "Coach,BasicUser"
                        },
                        new
                        {
                            Id = new Guid("6a305261-0d89-44a4-a306-086862a3da0f"),
                            Email = "user2@user.com",
                            Name = "Name 2",
                            Password = "pass2",
                            Roles = "Administrator,BasicUser"
                        },
                        new
                        {
                            Id = new Guid("eeb0d723-4361-4577-87fc-c00561f6f0f8"),
                            Email = "user3@user.com",
                            Name = "Name 3",
                            Password = "pass3",
                            Roles = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("8e2f88d7-1aa6-4cea-88d1-1adeeb83f1e5"),
                            Email = "user4@user.com",
                            Name = "Name 4",
                            Password = "pass4",
                            Roles = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("0d630cb0-6725-4b79-b451-c9f25b2392d1"),
                            Email = "user5@user.com",
                            Name = "Name 5",
                            Password = "pass5",
                            Roles = "Coach"
                        },
                        new
                        {
                            Id = new Guid("04e8cb77-d7b5-49ca-9465-7d29fed071c4"),
                            Email = "user6@user.com",
                            Name = "Name 6",
                            Password = "pass6",
                            Roles = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("8ee4fdb8-6765-4994-9580-77c65c34380b"),
                            Email = "user7@user.com",
                            Name = "Name 7",
                            Password = "pass7",
                            Roles = "Coach"
                        },
                        new
                        {
                            Id = new Guid("6e4aa48f-5fce-4c78-b418-1dc1afd0bbd3"),
                            Email = "user8@user.com",
                            Name = "Name 8",
                            Password = "pass8",
                            Roles = "Administrator,BasicUser"
                        },
                        new
                        {
                            Id = new Guid("4c2b8d87-058f-479e-b39f-06ab2408a2eb"),
                            Email = "user9@user.com",
                            Name = "Name 9",
                            Password = "pass9",
                            Roles = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("024008fe-419d-4ae8-a74a-c96d330825ef"),
                            Email = "user10@user.com",
                            Name = "Name 10",
                            Password = "pass10",
                            Roles = "BasicUser"
                        });
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TournamentCompetitor", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", "Team")
                        .WithMany("Tournaments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.Tournament", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TrainingParticipant", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Training", "Training")
                        .WithMany("Players")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.TeamCoach", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.TeamPlayer", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.PlayerDetails", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", "Team")
                        .WithMany("Trainings")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Team", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Players");

                    b.Navigation("Tournaments");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Tournament", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
