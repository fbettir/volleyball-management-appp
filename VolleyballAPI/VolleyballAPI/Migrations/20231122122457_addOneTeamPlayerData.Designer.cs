// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VolleyballManagementAppBackend;

#nullable disable

namespace VolleyballAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231122122457_addOneTeamPlayerData")]
    partial class addOneTeamPlayerData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VolleyballAPI.Entities.TournamentCompetitor", b =>
                {
                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TournamentId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TournamentCompetitor");
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TrainingParticipant", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrainingId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "TrainingId");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingParticipant");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("int");

                    b.Property<string>("Posts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketPass")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PlayerDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a82d691-d00c-4237-b022-e56ad19ce334"),
                            Birthday = new DateTime(2023, 11, 22, 13, 24, 57, 66, DateTimeKind.Local).AddTicks(4348),
                            Gender = 0,
                            Phone = "",
                            PlayerNumber = 0,
                            Posts = "Libero,Hitter,Receiver",
                            TicketPass = 0,
                            UserId = new Guid("0abf78b9-a84d-4827-8950-b65dc1fdcaf7")
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("84535fec-2d14-4ced-ab21-c2117f272367"),
                            Description = "Description Team 1",
                            Name = "Team 1",
                            Picture = "pic1"
                        },
                        new
                        {
                            Id = new Guid("65391f78-4359-43a7-bcab-3806517461ba"),
                            Description = "Description Team 2",
                            Name = "Team 2",
                            Picture = "pic2"
                        },
                        new
                        {
                            Id = new Guid("735fa8ba-935a-4809-82cf-7c3f1d94a493"),
                            Description = "Description Team 3",
                            Name = "Team 3",
                            Picture = "pic3"
                        },
                        new
                        {
                            Id = new Guid("9e50c7bd-c9f6-475b-8aaa-1b5196bb078f"),
                            Description = "Description Team 4",
                            Name = "Team 4",
                            Picture = "pic4"
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.TeamPlayer", b =>
                {
                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeamId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TeamPlayer");

                    b.HasData(
                        new
                        {
                            TeamId = new Guid("84535fec-2d14-4ced-ab21-c2117f272367"),
                            PlayerId = new Guid("4a82d691-d00c-4237-b022-e56ad19ce334")
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6dd66133-9bf7-485a-b8b9-6203f80ae95e"),
                            Date = new DateTime(2023, 11, 22, 13, 24, 57, 66, DateTimeKind.Local).AddTicks(4195),
                            Description = "Description Team 1",
                            Location = "Location tournament 1",
                            Name = "Tournament 1",
                            Picture = "pic4"
                        },
                        new
                        {
                            Id = new Guid("a6a60656-24de-47ef-b0d8-7726814a3056"),
                            Date = new DateTime(2023, 11, 22, 13, 24, 57, 66, DateTimeKind.Local).AddTicks(4242),
                            Description = "Description Tournament 2",
                            Location = "Location tournament 2",
                            Name = "Tournament 2",
                            Picture = "pic2"
                        });
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0abf78b9-a84d-4827-8950-b65dc1fdcaf7"),
                            Email = "user1@user.com",
                            Name = "Name 1",
                            Password = "pass1",
                            Roles = "Coach,BasicUser"
                        },
                        new
                        {
                            Id = new Guid("d2dcf26d-eda2-4ff2-905a-fddf9e1e1343"),
                            Email = "user2@user.com",
                            Name = "Name 2",
                            Password = "pass2",
                            Roles = "Administrator,BasicUser"
                        },
                        new
                        {
                            Id = new Guid("7698fb6c-c41a-472b-a088-68aecf275b9b"),
                            Email = "user3@user.com",
                            Name = "Name 3",
                            Password = "pass3",
                            Roles = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("f78a8aad-40e3-4da0-a89e-3cc1c10edf20"),
                            Email = "user4@user.com",
                            Name = "Name 4",
                            Password = "pass4",
                            Roles = "BasicUser"
                        },
                        new
                        {
                            Id = new Guid("fc8cf60e-a4e9-4c56-a577-1d2eff37244d"),
                            Email = "user5@user.com",
                            Name = "Name 5",
                            Password = "pass5",
                            Roles = "Coach"
                        });
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TournamentCompetitor", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.Tournament", "Tournament")
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("VolleyballAPI.Entities.TrainingParticipant", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Training", "Training")
                        .WithMany("Players")
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.TeamPlayer", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.PlayerDetails", "Player")
                        .WithMany("Teams")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Tournament", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", null)
                        .WithMany("Tournaments")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", null)
                        .WithMany("Trainings")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.User", b =>
                {
                    b.HasOne("VolleyballManagementAppBackend.Entities.Team", null)
                        .WithMany("Coaches")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.PlayerDetails", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Team", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Players");

                    b.Navigation("Tournaments");

                    b.Navigation("Trainings");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Tournament", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("VolleyballManagementAppBackend.Entities.Training", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
